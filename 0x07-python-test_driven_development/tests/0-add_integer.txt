=================
0-add_integer
=================

This is the unit test for the add_integer function

=================

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::
    >>> add_integer(3, -2)
    1

It also works with float numbers
::
    >>> add_integer(98.5, 30.2)
    128

It works with tow negative numbers
::

    >>> add_integer(-5.9, -0.7)
    -5

It works with one integer and a float
::
    >>> add_integer(5.5, -2)
    3

It works with one argument as 2nd is optional
::
    >>> add_integer(2)
    100

TypeError message when a is supplied as None
::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

TypeError message when b is None
::
    >>> add_integer(5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

TypeError a is if a is not an integer
::
    >>> add_integer("text", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

TypeError if be is not an integer
::
    >>> add_integer(3, "text")
    Traceback (most recent call last):
    TypeError: b must be an integer

NameError if a is not defined
::
    >>> add_integer(text, 3)
    Traceback (most recent call last):
    NameError: name 'text' is not defined

NameError a and b are not defined
::
    >>> add_integer(text1, text2)
    Traceback (most recent call last):
    NameError: name 'text1' is not defined

TypeError if a and b are not integers
::
    >>> add_integer("text1", "text2") 
    Traceback (most recent call last):
    TypeError: a must be an integer

OverflowError that causing infinity flow when a is int and b is inf
::
    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

ValueError for Non assigned Number NaN
::
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::
